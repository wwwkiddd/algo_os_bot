import telebot
from telebot import types
from parse import read_file, courses_info
import os

# Вставь свой токен, полученный от BotFather
TOKEN = "6859686203:AAFECvej96xYwCKzRWz0LtImq3g57GD0uvs"

# Создаем объект бота
bot = telebot.TeleBot(TOKEN)

# Глобальные переменные для отслеживания состояния пользователя
current_course = ""
current_module = ""
current_lesson = ""
current_module_lesson = ""
last_message_id = None  # Добавим переменную для хранения ID последнего отправленного сообщения

# Обработчик команды /start
@bot.message_handler(commands=['start'])
def start(message):
    global last_message_id  # Объявим переменную глобальной
    markup = types.InlineKeyboardMarkup(row_width=2)
    courses_buttons = [types.InlineKeyboardButton(course, callback_data=f"course_{course}") for course in
                       courses_info.keys()]
    global back_to_course_button
    back_to_course_button = types.InlineKeyboardButton("Вернуться к выбору курса", callback_data=f"back_to_course")
    markup.add(*courses_buttons)

    # Отправляем новое сообщение с кнопками
    sent_message = bot.send_message(message.chat.id, "Привет! Выбери курс:", reply_markup=markup)

    # Сохраняем ID последнего отправленного сообщения
    last_message_id = sent_message.message_id


# Обработчик выбора курса
@bot.callback_query_handler(func=lambda call: call.data.startswith("course_"))
def choose_course(call):
    global current_course, current_module_lesson, last_message_id
    current_course = call.data.split("_")[1]
    current_module_lesson = ""  # Обнуляем значение при выборе нового курса

    # Получаем информацию о модулях и уроках для выбранного курса
    course_info = courses_info[current_course]

    markup = types.InlineKeyboardMarkup(row_width=1)
    module_buttons = [types.InlineKeyboardButton(module, callback_data=f"module_{idx}") for idx, module in
                      enumerate(course_info["modules"])]
    markup.add(*module_buttons)
    markup.add(back_to_course_button)

    # Заменяем предыдущее сообщение новым с кнопками
    bot.edit_message_text("Теперь выбери модуль:", call.message.chat.id, last_message_id, reply_markup=markup)


# Обработчик выбора модуля
@bot.callback_query_handler(func=lambda call: call.data.startswith("module_"))
def choose_module(call):
    global current_module, current_module_lesson, last_message_id
    module_idx = int(call.data.split("_")[1])
    current_module = list(courses_info[current_course]["modules"].keys())[module_idx]
    current_module_lesson = ""  # Обнуляем значение при выборе нового модуля

    # Получаем информацию о модулях и уроках для выбранного курса
    course_info = courses_info[current_course]
    module_info = course_info["modules"][current_module]

    markup = types.InlineKeyboardMarkup(row_width=1)
    lesson_buttons = [types.InlineKeyboardButton(lesson, callback_data=f"lesson_{idx}") for idx, lesson in
                      enumerate(module_info["lessons"])]
    markup.add(*lesson_buttons)
    markup.add(back_to_course_button)

    # Заменяем предыдущее сообщение новым с кнопками
    bot.edit_message_text(f"Теперь выбери урок:", call.message.chat.id, last_message_id, reply_markup=markup)


# Обработчик выбора урока
@bot.callback_query_handler(func=lambda call: call.data.startswith("lesson_"))
def choose_lesson(call):
    global current_lesson, current_module_lesson, last_message_id
    lesson_idx = int(call.data.split("_")[1])
    current_lesson = courses_info[current_course]["modules"][current_module]["lessons"][lesson_idx]

    # Сохраняем номер модуля и номер урока в переменной current_module_lesson
    current_module_lesson = f"М{current_module[0]}У{lesson_idx + 1}"  # Используем первый символ модуля как его номер, увеличиваем на 1, так как порядковый номер начинается с 1

    # Заменяем предыдущее сообщение новым
    folder_path = f'C:/Users/wwwki/OneDrive/Рабочий стол/{current_course}'
    file_name = f'{current_module_lesson}.txt'
    file_path = os.path.join(folder_path, file_name)
    print(f"Путь к файлу: {file_path}")
    file_content = read_file(file_path)
    print(f"Содержимое файла: {file_content}")
    # Добавляем кнопку для возврата к выбору курса
    markup = types.InlineKeyboardMarkup()
    markup.add(back_to_course_button)
    bot.edit_message_text(f"Ты выбрал {current_module_lesson}. Вот твоя обратная связь:\n\n {file_content}", call.message.chat.id,
                          last_message_id, reply_markup=markup)


# Обработчик кнопки для возврата к выбору курса
@bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_course"))
def back_to_course(call):
    global last_message_id

    markup = types.InlineKeyboardMarkup(row_width=2)
    courses_buttons = [types.InlineKeyboardButton(course, callback_data=f"course_{course}") for course in
                       courses_info.keys()]
    markup.add(*courses_buttons)

    # Заменяем предыдущее сообщение новым с кнопками
    bot.edit_message_text("Привет! Выбери курс:", call.message.chat.id, last_message_id, reply_markup=markup)


# Запускаем бота
if __name__ == '__main__':
    bot.polling(none_stop=True)
